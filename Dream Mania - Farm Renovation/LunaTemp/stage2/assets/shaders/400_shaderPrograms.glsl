["\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    SV_Target0.w = min(u_xlat16_1.x, 1.0);\n    u_xlat4 = log2(_HdrMultiply);\n    u_xlat4 = u_xlat4 * 0.416666657;\n    u_xlat4 = exp2(u_xlat4);\n    u_xlat4 = u_xlat4 * 1.05499995 + -0.0549999997;\n    u_xlat4 = max(u_xlat4, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(u_xlat4);\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    SV_Target0.w = min(u_xlat16_1.x, 1.0);\n    u_xlat4 = log2(_HdrMultiply);\n    u_xlat4 = u_xlat4 * 0.416666657;\n    u_xlat4 = exp2(u_xlat4);\n    u_xlat4 = u_xlat4 * 1.05499995 + -0.0549999997;\n    u_xlat4 = max(u_xlat4, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(u_xlat4);\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _UseDissolveOffsetUV;\nuniform \tmediump float _InvertDissolveTex;\nuniform \tmediump float _DoubleDissolve;\nuniform \tmediump vec2 _DissolveScroll;\nuniform \tmediump float _DissolveSmooth;\nuniform \tmediump float _HdrMultiply;\nuniform \tmediump vec4 _DissolveTex_ST;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _DissolveTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nmediump float u_xlat16_6;\nvec2 u_xlat10;\nbvec2 u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat0.xy = _Time.yy * vec2(_DissolveScroll.x, _DissolveScroll.y);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;\n    u_xlat0.xy = u_xlat0.xy + u_xlat10.xy;\n    u_xlatb10.xy = lessThan(vec4(0.0, 0.0, 0.0, 0.0), vec4(_SingleChannel, _UseDissolveOffsetUV, _SingleChannel, _UseDissolveOffsetUV)).xy;\n    u_xlat0.xy = (u_xlatb10.y) ? u_xlat0.xy : vs_TEXCOORD0.xy;\n    u_xlat16_0.x = texture(_DissolveTex, u_xlat0.xy).x;\n    u_xlat16_1.x = u_xlat16_0.x * 2.0 + -1.0;\n    u_xlat5 = u_xlat16_1.x * vs_TEXCOORD1.z + vs_TEXCOORD0.x;\n    u_xlat16_1.x = (u_xlatb10.y) ? u_xlat5 : u_xlat16_0.x;\n    u_xlat16_6 = (-u_xlat16_1.x) + 1.0;\n    u_xlatb0 = 0.0>=_InvertDissolveTex;\n    u_xlat16_1.x = (u_xlatb0) ? u_xlat16_6 : u_xlat16_1.x;\n    u_xlat16_6 = u_xlat16_1.x + _DissolveSmooth;\n    u_xlat16_1.x = u_xlat16_1.x + (-_DissolveSmooth);\n    u_xlat16_6 = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_6 = float(1.0) / u_xlat16_6;\n    u_xlat16_11 = _DissolveSmooth * 2.0 + 1.0;\n    u_xlat16_11 = vs_TEXCOORD1.x * u_xlat16_11 + (-_DissolveSmooth);\n    u_xlat16_16 = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_16 = u_xlat16_6 * u_xlat16_16;\n    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat16_16 * -2.0 + 3.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_2.x;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_3.xyz = (u_xlatb10.x) ? vec3(1.0, 1.0, 1.0) : u_xlat16_2.xyz;\n    u_xlat16_3.w = (u_xlatb10.x) ? u_xlat16_2.x : u_xlat16_2.w;\n    u_xlat16_0 = u_xlat16_3 * vs_COLOR0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_0.w;\n    u_xlatb4 = 0.0<_DoubleDissolve;\n    u_xlat16_3.x = (u_xlatb4) ? vs_TEXCOORD1.y : 0.0;\n    u_xlat16_11 = u_xlat16_11 + (-u_xlat16_3.x);\n    u_xlatb4 = 0.0<u_xlat16_3.x;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_11;\n    u_xlat16_1.x = u_xlat16_6 * u_xlat16_1.x;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_6 = u_xlat16_1.x * -2.0 + 3.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = (-u_xlat16_6) * u_xlat16_1.x + u_xlat16_16;\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = (u_xlatb4) ? u_xlat16_1.x : u_xlat16_16;\n    SV_Target0.w = min(u_xlat16_1.x, 1.0);\n    u_xlat4 = log2(_HdrMultiply);\n    u_xlat4 = u_xlat4 * 0.416666657;\n    u_xlat4 = exp2(u_xlat4);\n    u_xlat4 = u_xlat4 * 1.05499995 + -0.0549999997;\n    u_xlat4 = max(u_xlat4, 0.0);\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vec3(u_xlat4);\n    u_xlatb4 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb4)) ? u_xlat16_1.xyz : u_xlat16_0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _SingleChannel;\nuniform \tmediump float _HdrMultiply;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nfloat u_xlat0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat0 = log2(_HdrMultiply);\n    u_xlat0 = u_xlat0 * 0.416666657;\n    u_xlat0 = exp2(u_xlat0);\n    u_xlat0 = u_xlat0 * 1.05499995 + -0.0549999997;\n    u_xlat0 = max(u_xlat0, 0.0);\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlatb3 = 0.0<_SingleChannel;\n    u_xlat16_2.xyz = (bool(u_xlatb3)) ? vec3(1.0, 1.0, 1.0) : u_xlat16_1.xyz;\n    u_xlat16_2.w = (u_xlatb3) ? u_xlat16_1.x : u_xlat16_1.w;\n    u_xlat16_1 = u_xlat16_2 * vs_COLOR0;\n    u_xlat16_2.xyz = vec3(u_xlat0) * u_xlat16_1.xyz;\n    u_xlatb0 = 0.0<_HdrMultiply;\n    SV_Target0.xyz = (bool(u_xlatb0)) ? u_xlat16_2.xyz : u_xlat16_1.xyz;\n    SV_Target0.w = min(u_xlat16_1.w, 1.0);\n    return;\n}\n\n"]