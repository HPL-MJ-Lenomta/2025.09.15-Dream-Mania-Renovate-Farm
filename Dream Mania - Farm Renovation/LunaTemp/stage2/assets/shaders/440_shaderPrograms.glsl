["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec4 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec4 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0.xyxy;\n    vs_TEXCOORD1 = in_TEXCOORD1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump float _GlowMin;\nuniform \tmediump float _GlowMax;\nuniform \tmediump float _MaxValue;\nuniform \tmediump float _HdrMultiply;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = (-u_xlat0.x) * 4.0 + 1.0;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlat16_1 = (-_GlowMin) + _GlowMax;\n    u_xlat16_1 = u_xlat0.x * u_xlat16_1 + _GlowMin;\n    u_xlat16_3 = u_xlat0.x * 30.0;\n    u_xlat16_3 = min(u_xlat16_3, 1.0);\n    u_xlat16_1 = max(u_xlat16_1, 0.0);\n    u_xlat16_1 = min(u_xlat16_1, _MaxValue);\n    u_xlat16_1 = u_xlat16_3 * u_xlat16_1;\n    u_xlat16_1 = u_xlat16_1 * vs_COLOR0.w;\n    SV_Target0.w = min(u_xlat16_1, 1.0);\n    u_xlat0.x = log2(_HdrMultiply);\n    u_xlat0.x = u_xlat0.x * 0.416666657;\n    u_xlat0.x = exp2(u_xlat0.x);\n    u_xlat0.x = u_xlat0.x * 1.05499995 + -0.0549999997;\n    u_xlat0.x = max(u_xlat0.x, 0.0);\n    u_xlatb2 = 0.0<_HdrMultiply;\n    u_xlat16_1 = (u_xlatb2) ? u_xlat0.x : 1.0;\n    SV_Target0.xyz = vec3(u_xlat16_1) * vs_COLOR0.xyz;\n    return;\n}\n\n"]